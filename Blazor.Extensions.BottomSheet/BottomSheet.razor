@using System.Diagnostics
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div @ref="container" class="sheet-container @Options.CustomClass">
    <div class="sheet-overlay"></div>
    <div class="sheet-content">
        <div class="sheet-header">
            <div class="sheet-drag-icon"><span></span></div>
        </div>
        <div class="sheet-body">
            @if (!string.IsNullOrWhiteSpace(Title))
            {
                <h2>@Title</h2>
            }
            @BottomSheetContent
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public RenderFragment? BottomSheetContent { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public BottomSheetOptions Options { get; set; } = new();

    [Parameter]
    public EventCallback OnDidDismiss { get; set; }

    [Parameter]
    public EventCallback OnDidShow { get; set; }

    [Parameter]
    public EventCallback OnWillDismiss { get; set; }

    [Parameter]
    public EventCallback OnWillShow { get; set; }

    private IJSObjectReference? disposable;
    private ElementReference container;


    public async ValueTask DisposeAsync()
    {
        if (disposable != null)
        {
            await disposable.InvokeVoidAsync("dispose");
            await disposable.DisposeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Options.Breakpoints = [25, 75];
            Options.LightDismiss = true;
            Options.Events = new BottomSheetEventsOptions
            {
                OnDidDismiss = DotNetCallbackReference.Create(() => OnDidDismiss.InvokeAsync()),
                OnDidShow = DotNetCallbackReference.Create(() => OnDidShow.InvokeAsync()),
                OnWillDismiss = DotNetCallbackReference.Create(() => OnWillDismiss.InvokeAsync()),
                OnWillShow = DotNetCallbackReference.Create(() => OnWillShow.InvokeAsync()),
            };

            var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Blazor.Extensions.BottomSheet/BottomSheet.razor.js");
            disposable = await module.InvokeAsync<IJSObjectReference>("initialize", container, Options);
        }
    }

    public ValueTask ShowAsync() => disposable?.InvokeVoidAsync("show") ?? throw new InvalidOperationException("BottomSheet not initialized");

    public ValueTask HideAsync() => disposable?.InvokeVoidAsync("hide") ?? throw new InvalidOperationException("BottomSheet not initialized");

    public ValueTask UpdateOptions(BottomSheetOptions options, bool merge = true) => disposable?.InvokeVoidAsync("updateOptions", options, merge) ?? throw new InvalidOperationException("BottomSheet not initialized");
}