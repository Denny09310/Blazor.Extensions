@using Blazor.Extensions.Refresher.Options

@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div @ref="loader" class="pull-to-refresh-loader">
    @RefresherLoader
</div>

@RefresherContent

@code
{
    [Parameter]
    public RenderFragment? RefresherLoader { get; set; }

    [Parameter]
    public RenderFragment? RefresherContent { get; set; }

    [Parameter]
    public RefresherOptions Options { get; set; } = new();

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    [EditorRequired]
    public string ContainerSelector { get; set; } = default!;

    [Parameter]
    public EventCallback OnRefresh { get; set; }

    private ElementReference loader;
    private IJSObjectReference? disposable;

    public async ValueTask DisposeAsync()
    {
        if (disposable is not null)
        {
            await disposable.InvokeVoidAsync("dispose");
            await disposable.DisposeAsync();
        }

        GC.SuppressFinalize(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Options.ContainerSelector = ContainerSelector;
            Options.Events = new RefresherEventsOptions
            {
                OnRefresh = DotNetCallbackReference.Create(() => OnRefresh.InvokeAsync()),
            };

            var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Blazor.Extensions.Refresher/Refresher.razor.js");
            disposable = await module.InvokeAsync<IJSObjectReference>("initialize", loader, Options);
        }
    }
}